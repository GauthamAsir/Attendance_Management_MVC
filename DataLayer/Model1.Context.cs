//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AttendanceManagementEntities : DbContext
    {
        public AttendanceManagementEntities()
            : base("name=AttendanceManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EmployeeDetail> EmployeeDetails { get; set; }
        public virtual DbSet<LeaveTransaction> LeaveTransactions { get; set; }
        public virtual DbSet<ProjectAttendance> ProjectAttendances { get; set; }
        public virtual DbSet<ProjectDetail> ProjectDetails { get; set; }
        public virtual DbSet<RoleDetail> RoleDetails { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<LeaveDetail> LeaveDetails { get; set; }
        public virtual DbSet<LoginCredential> LoginCredentials { get; set; }
    
        public virtual int sp_AddAttendance(Nullable<int> empid, Nullable<int> projectid)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddAttendance", empidParameter, projectidParameter);
        }
    
        public virtual int sp_AddEmpidandPassword(Nullable<int> empid, string password)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddEmpidandPassword", empidParameter, passwordParameter);
        }
    
        public virtual int sp_AddEmployee(string firstname, string lastname, Nullable<System.DateTime> dob, string contact, string email, string job, Nullable<int> managerid, Nullable<int> role, ObjectParameter success, ObjectParameter id)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var contactParameter = contact != null ?
                new ObjectParameter("contact", contact) :
                new ObjectParameter("contact", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var jobParameter = job != null ?
                new ObjectParameter("job", job) :
                new ObjectParameter("job", typeof(string));
    
            var manageridParameter = managerid.HasValue ?
                new ObjectParameter("managerid", managerid) :
                new ObjectParameter("managerid", typeof(int));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddEmployee", firstnameParameter, lastnameParameter, dobParameter, contactParameter, emailParameter, jobParameter, manageridParameter, roleParameter, success, id);
        }
    
        public virtual int sp_addleaveeverymonth(Nullable<int> empid)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_addleaveeverymonth", empidParameter);
        }
    
        public virtual int sp_AddProject(string projectname, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, ObjectParameter success)
        {
            var projectnameParameter = projectname != null ?
                new ObjectParameter("projectname", projectname) :
                new ObjectParameter("projectname", typeof(string));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddProject", projectnameParameter, startdateParameter, enddateParameter, success);
        }
    
        public virtual ObjectResult<sp_AdminViewAllAttendance_Result> sp_AdminViewAllAttendance(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AdminViewAllAttendance_Result>("sp_AdminViewAllAttendance", startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<sp_AdminViewAllLeave_Result> sp_AdminViewAllLeave()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AdminViewAllLeave_Result>("sp_AdminViewAllLeave");
        }
    
        public virtual ObjectResult<sp_AdminViewPendingAttendanceRequest_Result> sp_AdminViewPendingAttendanceRequest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AdminViewPendingAttendanceRequest_Result>("sp_AdminViewPendingAttendanceRequest");
        }
    
        public virtual ObjectResult<sp_AdminViewPendingLeaveRequest_Result> sp_AdminViewPendingLeaveRequest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AdminViewPendingLeaveRequest_Result>("sp_AdminViewPendingLeaveRequest");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_AssignEmployees_Result> sp_AssignEmployees(Nullable<int> projectid)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AssignEmployees_Result>("sp_AssignEmployees", projectidParameter);
        }
    
        public virtual int sp_AssignProject(Nullable<int> employeeid, Nullable<int> projectid, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, ObjectParameter success)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AssignProject", employeeidParameter, projectidParameter, startdateParameter, enddateParameter, success);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_DeleteAttendance(Nullable<int> empid, Nullable<int> projectid, ObjectParameter success)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteAttendance", empidParameter, projectidParameter, success);
        }
    
        public virtual int sp_DeleteEmployee(Nullable<int> id, ObjectParameter success)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteEmployee", idParameter, success);
        }
    
        public virtual int sp_DeleteLeaveRequest(Nullable<int> transactionid, ObjectParameter success)
        {
            var transactionidParameter = transactionid.HasValue ?
                new ObjectParameter("transactionid", transactionid) :
                new ObjectParameter("transactionid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteLeaveRequest", transactionidParameter, success);
        }
    
        public virtual int sp_DeleteProject(Nullable<int> id, ObjectParameter success)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteProject", idParameter, success);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_EmployeeViewAttendance_Result> sp_EmployeeViewAttendance(Nullable<int> employeeid)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmployeeViewAttendance_Result>("sp_EmployeeViewAttendance", employeeidParameter);
        }
    
        public virtual ObjectResult<sp_EmployeeViewLeave_Result> sp_EmployeeViewLeave(Nullable<int> employeeid)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmployeeViewLeave_Result>("sp_EmployeeViewLeave", employeeidParameter);
        }
    
        public virtual ObjectResult<sp_GetDateForProject_Result> sp_GetDateForProject(Nullable<int> projectid)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDateForProject_Result>("sp_GetDateForProject", projectidParameter);
        }
    
        public virtual ObjectResult<sp_GetEmployeeDetails_Result> sp_GetEmployeeDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEmployeeDetails_Result>("sp_GetEmployeeDetails");
        }
    
        public virtual ObjectResult<sp_GetEmployeeDetailsForProject_Result> sp_GetEmployeeDetailsForProject(Nullable<int> projectid)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEmployeeDetailsForProject_Result>("sp_GetEmployeeDetailsForProject", projectidParameter);
        }
    
        public virtual ObjectResult<sp_GetEmployeeInfoByID_Result> sp_GetEmployeeInfoByID(string employeeID)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEmployeeInfoByID_Result>("sp_GetEmployeeInfoByID", employeeIDParameter);
        }
    
        public virtual ObjectResult<sp_GetEmployeeName_Result> sp_GetEmployeeName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEmployeeName_Result>("sp_GetEmployeeName");
        }
    
        public virtual int sp_GetLastRefreshedDate(Nullable<int> employeeid, ObjectParameter lastdate)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetLastRefreshedDate", employeeidParameter, lastdate);
        }
    
        public virtual ObjectResult<sp_GetManagerName_Result> sp_GetManagerName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetManagerName_Result>("sp_GetManagerName");
        }
    
        public virtual ObjectResult<sp_GetProjectName_Result> sp_GetProjectName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProjectName_Result>("sp_GetProjectName");
        }
    
        public virtual ObjectResult<sp_GetProjectOfEmployee_Result> sp_GetProjectOfEmployee(Nullable<int> empid)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProjectOfEmployee_Result>("sp_GetProjectOfEmployee", empidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_GetRemainingLeave(Nullable<int> employeeid)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GetRemainingLeave", employeeidParameter);
        }
    
        public virtual ObjectResult<sp_GetRole_Result> sp_GetRole()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetRole_Result>("sp_GetRole");
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_login(Nullable<int> empid, string password, ObjectParameter success, ObjectParameter roleid, ObjectParameter empName)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_login", empidParameter, passwordParameter, success, roleid, empName);
        }
    
        public virtual ObjectResult<sp_ManagerViewPendingAttendanceRequest_Result> sp_ManagerViewPendingAttendanceRequest(Nullable<int> managerid)
        {
            var manageridParameter = managerid.HasValue ?
                new ObjectParameter("managerid", managerid) :
                new ObjectParameter("managerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ManagerViewPendingAttendanceRequest_Result>("sp_ManagerViewPendingAttendanceRequest", manageridParameter);
        }
    
        public virtual ObjectResult<sp_ManagerViewPendingLeaveRequest_Result> sp_ManagerViewPendingLeaveRequest(Nullable<int> managerid)
        {
            var manageridParameter = managerid.HasValue ?
                new ObjectParameter("managerid", managerid) :
                new ObjectParameter("managerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ManagerViewPendingLeaveRequest_Result>("sp_ManagerViewPendingLeaveRequest", manageridParameter);
        }
    
        public virtual int sp_RemoveEmployeeFromAssignedProject(Nullable<int> employeeid, Nullable<int> projectid)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RemoveEmployeeFromAssignedProject", employeeidParameter, projectidParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_RequestLeave(Nullable<int> empid, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> noofdays, string reason, ObjectParameter success)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var noofdaysParameter = noofdays.HasValue ?
                new ObjectParameter("noofdays", noofdays) :
                new ObjectParameter("noofdays", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RequestLeave", empidParameter, startDateParameter, endDateParameter, noofdaysParameter, reasonParameter, success);
        }
    
        public virtual ObjectResult<sp_SearchEmployeeDetails_Result> sp_SearchEmployeeDetails(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SearchEmployeeDetails_Result>("sp_SearchEmployeeDetails", searchParameter);
        }
    
        public virtual int sp_UpdateAttendance(Nullable<int> empid, Nullable<int> projectid, Nullable<int> status)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAttendance", empidParameter, projectidParameter, statusParameter);
        }
    
        public virtual int sp_UpdateEmployee(Nullable<int> id, string firstname, string lastname, Nullable<System.DateTime> dob, string contact, string email, string job, Nullable<int> managerid, Nullable<int> role, ObjectParameter success)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var contactParameter = contact != null ?
                new ObjectParameter("contact", contact) :
                new ObjectParameter("contact", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var jobParameter = job != null ?
                new ObjectParameter("job", job) :
                new ObjectParameter("job", typeof(string));
    
            var manageridParameter = managerid.HasValue ?
                new ObjectParameter("managerid", managerid) :
                new ObjectParameter("managerid", typeof(int));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateEmployee", idParameter, firstnameParameter, lastnameParameter, dobParameter, contactParameter, emailParameter, jobParameter, manageridParameter, roleParameter, success);
        }
    
        public virtual int sp_UpdateLeaveStatus(Nullable<int> transid, string status)
        {
            var transidParameter = transid.HasValue ?
                new ObjectParameter("transid", transid) :
                new ObjectParameter("transid", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateLeaveStatus", transidParameter, statusParameter);
        }
    
        public virtual int sp_UpdateProject(Nullable<int> id, string projectname, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, ObjectParameter success)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var projectnameParameter = projectname != null ?
                new ObjectParameter("projectname", projectname) :
                new ObjectParameter("projectname", typeof(string));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateProject", idParameter, projectnameParameter, startdateParameter, enddateParameter, success);
        }
    
        public virtual int sp_UpdateRequestLeave(Nullable<int> transactionid, Nullable<int> empid, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> noofdays, string reason, ObjectParameter success)
        {
            var transactionidParameter = transactionid.HasValue ?
                new ObjectParameter("transactionid", transactionid) :
                new ObjectParameter("transactionid", typeof(int));
    
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var noofdaysParameter = noofdays.HasValue ?
                new ObjectParameter("noofdays", noofdays) :
                new ObjectParameter("noofdays", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateRequestLeave", transactionidParameter, empidParameter, startDateParameter, endDateParameter, noofdaysParameter, reasonParameter, success);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_GetProjectOfEmployee_Result> sp_GetDateForProject1(Nullable<int> projectid)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProjectOfEmployee_Result>("sp_GetDateForProject1", projectidParameter);
        }
    
        public virtual int sp_IsAttendanceMarked(Nullable<int> empid, Nullable<int> projid, Nullable<System.DateTime> date, ObjectParameter status)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            var projidParameter = projid.HasValue ?
                new ObjectParameter("projid", projid) :
                new ObjectParameter("projid", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IsAttendanceMarked", empidParameter, projidParameter, dateParameter, status);
        }
    }
}
